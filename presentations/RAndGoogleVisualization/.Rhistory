cons.mode
dim(cons.mode)
length(cons.mode)
length(genoMap)
dim(genoMap)
head(genoMap)
table(genoMap$Chromosome)
chrTable <- table(genoMap$Chromosome)
chrTable[order(as.numeric(names(chrTable)))]
chrTable[order(as.numeric(names(chrTable)))]
chrTable <- chrTable[order(as.numeric(names(chrTable)))]
chrTable
cumsum(chrTable)
gt.outliers.hi
chrTable
chrTable.cs <- as.vector(cumsum(chrTable))
chrTable.cs
axis(1,at=chrTable.cs)
plot(mw.cons.mode,type="l", ylab="Level of agreement", xlab="Accumulated Chromosomal Location", xaxt="n")
axis(1,at=chrTable.cs)
chrTable.cs0 <- c(0,chrTable.cs[-length(chrTable)])
(chrTable.cs+chrTable.cs0)/2
chrTable.cs0+(chrTable.cs+chrTable.cs0)/2
axis(1,at=(chrTable.cs+chrTable.cs0)/2, labels=names(chrTable))
plot(mw.cons.mode,type="l", ylab="Level of agreement", xlab="Accumulated Chromosomal Location", xaxt="n")
axis(1,at=chrTable.cs,label="")
axis(1,at=chrTable.cs,label=rep("",length(chrTable.cs)))
axis(1,at=(chrTable.cs+chrTable.cs0)/2, labels=names(chrTable))
plot(mw.cons.mode,type="l", ylab="Level of agreement", xlab="Accumulated Chromosomal Location", xaxt="n")
axis(1,at=chrTable.cs,label=rep("",length(chrTable.cs)))
axis(1,at=(chrTable.cs+chrTable.cs0)/2, labels=names(chrTable), tick=FALSE)
pdf(paste(codeFolder,"movingAverage.pdf",sep=""),width=15,height=10)
plot(mw.cons.mode,type="l", ylab="Level of agreement", xlab="Accumulated Chromosomal Location", xaxt="n")
axis(1,at=chrTable.cs,label=rep("",length(chrTable.cs)))
axis(1,at=(chrTable.cs+chrTable.cs0)/2, labels=names(chrTable), tick=FALSE)
dev.off()
pdf(paste(codeFolder,"movingAverage.pdf",sep=""),width=18,height=10)
plot(mw.cons.mode,type="l", ylab="Level of agreement", xlab="Accumulated Chromosomal Location", xaxt="n")
axis(1,at=chrTable.cs,label=rep("",length(chrTable.cs)))
axis(1,at=(chrTable.cs+chrTable.cs0)/2, labels=names(chrTable), tick=FALSE)
dev.off()
pdf(paste(codeFolder,"movingAverage.pdf",sep=""),width=20,height=10)
plot(mw.cons.mode,type="l", ylab="Level of agreement", xlab="Accumulated Chromosomal Location", xaxt="n")
axis(1,at=chrTable.cs,label=rep("",length(chrTable.cs)))
axis(1,at=(chrTable.cs+chrTable.cs0)/2, labels=names(chrTable), tick=FALSE)
dev.off()
boxplot(P2 ~ Genera, data=zw, main="Egg Production in Period 2",xlab="Generation")
sigBV
# Now plot the boxplots for those (first column are the outliers and then close, intermedita and far)
for(i in 1:length(sigBV)){
closeS <- pop.zw[distOfPop.cut==1,colnames(pop.zw)==sigBV[i]]
interS <- pop.zw[distOfPop.cut==2,colnames(pop.zw)==sigBV[i]]
farS <- pop.zw[distOfPop.cut==3,colnames(pop.zw)==sigBV[i]]
outS <- out.zw[,colnames(pop.zw)==sigBV[i]]
# jpeg(paste(codeFolder,"Boxplot_",sigBV[i],".jpg",sep=""),width=500,height=500)
pdf(paste(codeFolder,"Boxplot_",sigBV[i],".pdf",sep=""),width=10,height=10)
#  boxplot(outS, xlim=c(0.5,4.5), ylim=range(c(outS,closeS,interS,farS),na.rm=TRUE), main=sigBV[i])
boxplot(outS, xlim=c(0.5,4.5), ylim=range(c(outS,closeS,interS,farS),na.rm=TRUE), main=sigBV[i])
boxplot(closeS, at=2,add=TRUE)
boxplot(interS, at=3,add=TRUE)
boxplot(farS, at=4,add=TRUE)
axis(1,at=c(1:4),label=c("Out", "Close", "Inter", "Far"))
dev.off()
}
wilP <- c()
gmwP123 <- c()
gmwP321 <- c()
tempGreater <- c()
tempLess <- c()
index <- 1
for(testThis in 8:22){
wilP[index] <- round(wilcox.test(out.zw[,testThis],pop.zw[,testThis])$p.value,4)
tempGreater[index] <- round(wilcox.test(out.zw[,testThis],pop.zw[,testThis],alternative="greater")$p.value,4)
tempLess[index] <- round(wilcox.test(out.zw[,testThis],pop.zw[,testThis], alternative="less")$p.value,4)
remThese <- which(is.na(pop.zw[,testThis]))
gmwP123[index] <- gmw(pop.zw[-remThese,testThis],g=createGroups(distOfPop.cut[-remThese],c(1,2,3)),test="trip")$p.value
gmwP321[index] <- gmw(pop.zw[-remThese,testThis],g=createGroups(distOfPop.cut[-remThese],c(3,2,1)),test="trip")$p.value
index <- index + 1
cat("Index",testThis,"is ready!\n")
}
imputRegions <- data.frame(Chr=c(1, 2, 3, 3, 5, 6, 12),
Start=c(145314508, 58586393, 33563360, 72050861, 13998982, 17623627, 1792888),
End=c(146487696, 75149459, 35859714, 74658633, 15603461, 21729370, 3080893 )
)
imputRegions
png(paste(codeFolder,"imputedRegions.pdf",sep=""),width=800,height=800)
plot(NA,ylim=c(0.5,length(referenceLength)), xlim=c(0,max(referenceLength)), xlab="Chromosomal Position", ylab="Chromosome", yaxt="n")
for(i in 1:length(referenceLength)){
lines(c(0,referenceLength[i]),c(i,i))
dev.off()
)
plot(NA,ylim=c(0.5,length(referenceLength)), xlim=c(0,max(referenceLength)), xlab="Chromosomal Position", ylab="Chromosome", yaxt="n")
for(i in 1:length(referenceLength)){
lines(c(0,referenceLength[i]),c(i,i))
}
png(paste(codeFolder,"imputedRegions.pdf",sep=""),width=800,height=800)
plot(NA,ylim=c(0.5,length(referenceLength)), xlim=c(0,max(referenceLength)), xlab="Chromosomal Position", ylab="Chromosome", yaxt="n")
for(i in 1:length(referenceLength)){
lines(c(0,referenceLength[i]),c(i,i))
}
for(i in 1:nrow(imputRegions)){
lines(c(imputRegions[i,2],imputRegions[i,3]), c(imputRegions[i,1],imputRegions[i,1]),col="red", lwd=11)
}
axis(2,at=1:31,labels=c(1:29,"W","Z"), las=2)
dev.off()
seq(0,200000000,5000000)
seq(0,200000000,50000000)
options("scipen"=100, "digits"=4)
# Plot for Johanna
imputRegions <- data.frame(Chr=c(1, 2, 3, 3, 5, 6, 12),
Start=c(145314508, 58586393, 33563360, 72050861, 13998982, 17623627, 1792888),
End=c(146487696, 75149459, 35859714, 74658633, 15603461, 21729370, 3080893 )
)
png(paste(codeFolder,"imputedRegions.pdf",sep=""),width=800,height=800)
plot(NA,ylim=c(0.5,length(referenceLength)), xlim=c(0,max(referenceLength)), xlab="Chromosomal Position", ylab="Chromosome", yaxt="n", xaxt="n")
for(i in 1:length(referenceLength)){
lines(c(0,referenceLength[i]),c(i,i))
}
for(i in 1:nrow(imputRegions)){
lines(c(imputRegions[i,2],imputRegions[i,3]), c(imputRegions[i,1],imputRegions[i,1]),col="red", lwd=11)
}
axis(1,at=c())
axis(2,at=1:31,labels=c(1:29,"W","Z"), las=2)
dev.off()
c(seq(0,200000000,25000000))
c(seq(0,200000000,25000000))/1000000
# Plot for Johanna
imputRegions <- data.frame(Chr=c(1, 2, 3, 3, 5, 6, 12),
Start=c(145314508, 58586393, 33563360, 72050861, 13998982, 17623627, 1792888),
End=c(146487696, 75149459, 35859714, 74658633, 15603461, 21729370, 3080893 )
)
png(paste(codeFolder,"imputedRegions.pdf",sep=""),width=800,height=800)
plot(NA,ylim=c(0.5,length(referenceLength)), xlim=c(0,max(referenceLength)), xlab="Chromosomal Position (in Mb)", ylab="Chromosome", yaxt="n", xaxt="n")
for(i in 1:length(referenceLength)){
lines(c(0,referenceLength[i]),c(i,i))
}
for(i in 1:nrow(imputRegions)){
lines(c(imputRegions[i,2],imputRegions[i,3]), c(imputRegions[i,1],imputRegions[i,1]),col="red", lwd=11)
}
axis(1,at=c(seq(0,200000000,25000000)), label=c(seq(0,200000000,25000000))/1000000)
axis(2,at=1:31,labels=c(1:29,"W","Z"), las=2)
dev.off()
png(paste(codeFolder,"imputedRegions.png",sep=""),width=800,height=800)
plot(NA,ylim=c(0.5,length(referenceLength)), xlim=c(0,max(referenceLength)), xlab="Chromosomal Position (in Mb)", ylab="Chromosome", yaxt="n", xaxt="n")
for(i in 1:length(referenceLength)){
lines(c(0,referenceLength[i]),c(i,i))
}
for(i in 1:nrow(imputRegions)){
lines(c(imputRegions[i,2],imputRegions[i,3]), c(imputRegions[i,1],imputRegions[i,1]),col="red", lwd=11)
}
axis(1,at=c(seq(0,200000000,25000000)), label=c(seq(0,200000000,25000000))/1000000)
axis(2,at=1:31,labels=c(1:29,"W","Z"), las=2)
dev.off()
apropos("exist")
dir.exists()
dir.exists("/home/ejo138/Dropbox/OngoingProjects/hoardeR/hoardeR-FunctionChecks/logTest2/")
library(hoardeR)
test <- blastSeq(c("ACGTGCATCGACTAGCTACGACTACGACTATC","ACGTGCATCGACTA"),
email="daniel.fischer@luke.fi",
xmlFolder="/home/ejo138/Dropbox/OngoingProjects/hoardeR/hoardeR-FunctionChecks/xmlTest/",
logFolder="/home/ejo138/Dropbox/OngoingProjects/hoardeR/hoardeR-FunctionChecks/logTest2/",
verbose=FALSE)
library(hoardeR)
test <- blastSeq(c("ACGTGCATCGACTAGCTACGACTACGACTATC","ACGTGCATCGACTA"),
email="daniel.fischer@luke.fi",
xmlFolder="/home/ejo138/Dropbox/OngoingProjects/hoardeR/hoardeR-FunctionChecks/xmlTest/",
logFolder="/home/ejo138/Dropbox/OngoingProjects/hoardeR/hoardeR-FunctionChecks/logTest2/",
verbose=FALSE)
library(hoardeR)
test <- blastSeq(c("ACGTGCATCGACTAGCTACGACTACGACTATC","ACGTGCATCGACTA"),
email="daniel.fischer@luke.fi",
xmlFolder="/home/ejo138/Dropbox/OngoingProjects/hoardeR/hoardeR-FunctionChecks/xmlTest/",
logFolder="/home/ejo138/Dropbox/OngoingProjects/hoardeR/hoardeR-FunctionChecks/logTest2/",
verbose=FALSE)
library(hoardeR)
testFA <- importFA("/home/ejo138/Dropbox/OngoingProjects/hoardeR/hoardeR-FunctionChecks/logTest2/")
testFA <- importFA("/home/ejo138/Dropbox/OngoingProjects/hoardeR/hoardeR-FunctionChecks/novelLoci_13660.fa")
testFA
summary(testFA)
testBlast <- blastSeq(testFA)
testBlast <- blastSeq(testFA, email="daniel.fischer@luke.fi")
print(testFA)
print(testFA, n=5)
testFA <- importFA("/home/ejo138/Dropbox/OngoingProjects/hoardeR/hoardeR-FunctionChecks/novelLoci_13660.fa")
testBlast <- blastSeq(testFA[1:30],
email="daniel.fischer@luke.fi",
xmlPath="/home/ejo138/Dropbox/OngoingProjects/hoardeR/hoardeR-FunctionChecks/xmlNow/",
createLog=TRUE)
testBlast <- blastSeq(testFA[1:30],
email="daniel.fischer@luke.fi",
xmlFolder="/home/ejo138/Dropbox/OngoingProjects/hoardeR/hoardeR-FunctionChecks/xmlNow/",
createLog=TRUE)
temp <- importXML(testFA, folder="/home/ejo138/Dropbox/OngoingProjects/hoardeR/hoardeR-FunctionChecks/xmlNow/")
temp
summary(temp)
temp <- importXML(testFA, folder="/home/ejo138/Dropbox/OngoingProjects/hoardeR/hoardeR-FunctionChecks/xmlNow/")
summary(temp)
library(hoardeR)
testFA <- importFA("/home/ejo138/Dropbox/OngoingProjects/hoardeR/hoardeR-FunctionChecks/novelLoci_13660.fa")
temp <- importXML(testFA, folder="/home/ejo138/Dropbox/OngoingProjects/hoardeR/hoardeR-FunctionChecks/xmlNow/")
temp
summary(temp)
getAssemblies(temp)
temp[[1]]
temp[[2]]
temp[[3]]
temp[[4]]
temp[[6]]
temp[[8]]
temp[[18]]
getEnsgInfo("ENSG00000174482")
getEnsgInfo("ENSG00000174482")
getGeneSeq(chr=1, start=1123423, end= 1123450, organism="Sscrofa10.2")
getGeneSeq(chr=1, start=1123423, end= 1123450, organism="susScr3")
getGeneSeq(chr=1, start=1123423, end= 1123450, organism="susScr10.2")
getGeneSeq(chr=1, start=1123423, end= 1123450, organism="susScr3")
getGeneSeq(chr=1, start=1123423, end= 1123550, organism="susScr10.2")
getGeneSeq(chr=1, start=1123423, end= 1123550, organism="susScr3")
species
temp
speciesFigure(temp)
speciesFigure(temp, species)
temp
xml
temp
speciesFigure(temp, species, plot=FALSE)
sum(speciesFigure(temp, species, plot=FALSE))
temp
summary(temp)
getAssemblies(temp)
table(getAssemblies(temp))
barplot(table(getAssemblies(temp)))
plot(table(getAssemblies(temp)))
species
temp[[1]]
plot(temp)
plot(temp, species)
temp[[1]]
temp[[13]]
temp[[16]]
# This script performs the enrichment test for the ihs intersection with the GWAS results
# Set the constants respective variables of the script
set.seed(6756783)
breeds <- c("Angus",
"AngusRed",
"AyrshireFinnish",
"BelgianBlue",
"BrownSwiss",
"Charolais",
"Charolais2",
"DanishRed",
"Fleckvieh",
"Gelbvieh",
"Hereford",
"Holstein",
"HolsteinRW",
"Jersey",
"Limousin",
"Montbeliarde",
"Normande",
"Simmental",
"Simmental2",
"SwedishRed")
GWASHDDlocs <- "/home/ejo138/Dropbox/OngoingProjects/1kbulls-SelectionSignatures/data/GWASmetafiles/"
IHSlocs <- "/media/ejo138/My Passport/1kbulls/ihs/"
noResampling <- 1000
# Get GWASbreeds
GWASfiles <- list.files(GWASHDDlocs)
GWASbreeds <- sapply(strsplit(GWASfiles,"\\."),"[",1)
GWASbreeds
# This script performs a GO term GSEA analysis for the different breeds
# Clear the workspace
rm(list=ls())
# Load the required library
library(topGO)
install.packages("topGO")
source("http://bioconductor.org/biocLite.R")
biocLite("topGO")
# Clear the workspace
rm(list=ls())
# Load the required library
library(topGO)
options(stringsAsFactors=FALSE)
# Load the example Gene set
geneset <- read.table("/home/ejo138/Dropbox/Projects2015-/1kBulls/IntersectionFE/GenesInSignificantRegions-1/Angus.SignificantRegions.genes")
geneset
# Import the KOE70 data, for each single sample point
# Clear the working space
rm(list=ls())
options("scipen"=100, "digits"=4)
options(stringsAsFactors=FALSE)
install.packages('googleVis')
library(googleVis)
library(googleVis)
library(googleVis)
data(Fruits)
Fruits
M <- gvisMotionChart(Fruits, idvar="Fruit", timevar="Year")
M
plot(M)
AndrewMap <- gvisMap(Andrew, "LatLong" , "Tip",
options=list(showTip=TRUE,
showLine=TRUE,
enableScrollWheel=TRUE,
mapType='terrain',
useMapTypeControl=TRUE))
plot(AndrewMap)
getwd()
PT=data.frame(cityname=c("Lisboa", "Porto", "Coimbra"), Size=c(600, 250, 150))
G= gvisGeoChart(PT, locationvar="cityname",
colorvar="Size",options=list(width=600, height=400,region="PT", resolution="provinces"))
print(G, file="figs/gvis6.html")
print(G, file="temp/gvis6.html")
library(googleVis)
data(Fruits)
Fruits
M <- gvisMotionChart(Fruits, idvar="Fruit", timevar="Year")
plot(M)
plot(AndrewMap)
test <- runif(14*10^6)
test
test.adjusted <- p.adjust(test[1:100000], method="BH")
test.adjusted
test.adjusted <- p.adjust(test[1:1000000], method="BH")
test.adjusted <- p.adjust(test, method="BH")
system.time(test.adjusted <- p.adjust(test, method="BH"))
print(paste(’FastLSU for group of’,mtg,’p-values.’))
fast.LSU = function(alpha=0.1,pvls,mtc,mtg){
# alpha: the desired significance level;
# mtg: the global number of p-values in the problem (the sum of all p-values in all chunks);
# mcg: total number of p-values in the chunk (<=mtg);
# pvls: pvalues;
# -----------------------------------------------------------------------------------------;
m = length(pvls); #no of actual p-values at the input chunk (might be < mtc, e.g., step c+1 in algorithm 2);
print(paste('FastLSU for group of',mtg,'p-values.'))
if(m<mtc){
print(paste(m,'p-values were detected at the input chunk. Original chunk size is assumed to be',mtc));
print('Make sure your chunk size is correct.'');
print('Input chunk size can smaller than the assumed chunk size at the final step c+1 of Algorithm 2.'');
}
if(mtc<mtg){print(paste('Input chunk size is',mtc,'. Group size is', mtg,'p-values.'))}
sig = rep(1,m); #flag, for significance, 1 is default;
r.new = m;
r.old = m-1;
diff.r = 1;
stp = 0; #follow steps;
while(diff.r>0){
stp = stp+1
sig[pvls>=(r.new+mtg-mtc)*alpha/mtg] = 0; #set the sig flag of large enough p-values to zero;
r.old = r.new;
r.new = sum(sig);
print(paste(’On step’,stp,’:’,sum(sig),’p-values were selected for candidance of significant.’))
diff.r = r.old - r.new
}
return(list(pvalues.c=pvls[sig==1],r=r.new,sig=sig))
}
fast.LSU = function(alpha=0.1,pvls,mtc,mtg){
# alpha: the desired significance level;
# mtg: the global number of p-values in the problem (the sum of all p-values in all chunks);
# mcg: total number of p-values in the chunk (<=mtg);
# pvls: pvalues;
# -----------------------------------------------------------------------------------------;
m = length(pvls); #no of actual p-values at the input chunk (might be < mtc, e.g., step c+1 in algorithm 2);
print(paste('FastLSU for group of',mtg,'p-values.'))
if(m<mtc){
print(paste(m,'p-values were detected at the input chunk. Original chunk size is assumed to be',mtc));
print('Make sure your chunk size is correct.');
print('Input chunk size can smaller than the assumed chunk size at the final step c+1 of Algorithm 2.');
}
if(mtc<mtg){print(paste('Input chunk size is',mtc,'. Group size is', mtg,'p-values.'))}
sig = rep(1,m); #flag, for significance, 1 is default;
r.new = m;
r.old = m-1;
diff.r = 1;
stp = 0; #follow steps;
while(diff.r>0){
stp = stp+1
sig[pvls>=(r.new+mtg-mtc)*alpha/mtg] = 0; #set the sig flag of large enough p-values to zero;
r.old = r.new;
r.new = sum(sig);
print(paste('On step',stp,':',sum(sig),'p-values were selected for candidance of significant.'))
diff.r = r.old - r.new
}
return(list(pvalues.c=pvls[sig==1],r=r.new,sig=sig))
}
#simulate p-values for example;
pvals.sim = runif(30000); # random U[0,1] (null) p-values;
Bsig = 1-rbinom(30000,1, .02); Bsig[Bsig==0] = .0001;
pvals.sim = pvals.sim*Bsig; #add 2% of small p-values to be significant;
pvals.sim
results.allchunks = fast.LSU(alpha=0.1,pvls=pvals.sim,mtc=length(pvals.sim),mtg=length(pvals.sim));
pv.chunk1 = pvals.sim[1:10000];
pv.chunk2 = pvals.sim[10001:30000];
# Step 1:
results.chunk1 = fast.LSU(alpha=0.1,pvls=pv.chunk1,mtc=length(pv.chunk1),mtg=length(pvals.sim));
# Step 2:
results.chunk2 = fast.LSU(alpha=0.1,pvls=pv.chunk2,mtc=length(pv.chunk2),mtg=length(pvals.sim));
# Step 3: # get final candidancy;
cand.pvals = t(cbind(t(results.chunk1$pvalues.c),t(results.chunk2$pvalues.c)));
# keep mtc equal to mtg, the fast.LSU function already considers length(cand.pvals).
results.final = fast.LSU(alpha=0.1,pvls=cand.pvals,mtc=length(pvals.sim),mtg=length(pvals.sim));
pvals.sim <- test
results.allchunks = fast.LSU(alpha=0.1,pvls=pvals.sim,mtc=length(pvals.sim),mtg=length(pvals.sim));
sum(test.adjusted<0.1)
results.allchunks
pvals.sim = runif(30000); # random U[0,1] (null) p-values;
Bsig = 1-rbinom(30000,1, .02); Bsig[Bsig==0] = .0001;
pvals.sim = pvals.sim*Bsig; #add 2% of small p-values to be significant;
results.allchunks = fast.LSU(alpha=0.1,pvls=pvals.sim,mtc=length(pvals.sim),mtg=length(pvals.sim));
results.allchunks
p.adjust(pvals.sim, method="BH")
results.allchunks
plot(results.allchunks$pvalues.c,p.adjust(pvals.sim, method="BH"))
results.allchunks$pvalues.c
results.allchunks = fast.LSU(alpha=1,pvls=pvals.sim,mtc=length(pvals.sim),mtg=length(pvals.sim));
results.allchunks
plot(results.allchunks$pvalues.c,p.adjust(pvals.sim, method="BH"))
results.allchunks = fast.LSU(alpha=0.1,pvls=pvals.sim,mtc=length(pvals.sim),mtg=length(pvals.sim));
results.allchunks
results.final
results.allchunks
p.adjust(pvals.sim, method="BH")
sum(p.adjust(pvals.sim, method="BH")<0.1)
library(gMWT)
install.packages("gMWT")
library(gMWT)
getSigTests(simData, method="sim")
getSigTests(pvalues=simData, method="bh",alpha=0.05)
getSigTests(pvalues=pvals.sim, method="bh",alpha=0.1)
system.time(getSigTests(pvalues=pvals.sim, method="bh",alpha=0.1))
results.allchunks = fast.LSU(alpha=0.1,pvls=pvals.sim,mtc=length(pvals.sim),mtg=length(pvals.sim));
system.time(results.allchunks = fast.LSU(alpha=0.1,pvls=pvals.sim,mtc=length(pvals.sim),mtg=length(pvals.sim)))
system.time(fast.LSU(alpha=0.1,pvls=pvals.sim,mtc=length(pvals.sim),mtg=length(pvals.sim)))
system.time(getSigTests(pvalues=pvals.sim, method="bh",alpha=0.1))
pvals.sim <- test
system.time(fast.LSU(alpha=0.1,pvls=pvals.sim,mtc=length(pvals.sim),mtg=length(pvals.sim)))
system.time(getSigTests(pvalues=pvals.sim, method="bh",alpha=0.1))
system.time(getSigTests(pvalues=pvals.sim, method="bh",alpha=0.1))
?getSigTests
getSigTests
results.final = fast.LSU(alpha=0.1,pvls=cand.pvals,mtc=length(pvals.sim),mtg=length(pvals.sim));
pvals.sim = runif(30000); # random U[0,1] (null) p-values;
pvals.sim = runif(3000000); # random U[0,1] (null) p-values;
Bsig = 1-rbinom(3000000,1, .02); Bsig[Bsig==0] = .0001;
pvals.sim = pvals.sim*Bsig; #add 2% of small p-values to be significant;
results.allchunks = fast.LSU(alpha=0.1,pvls=pvals.sim,mtc=length(pvals.sim),mtg=length(pvals.sim));
system.time(fast.LSU(alpha=0.1,pvls=pvals.sim,mtc=length(pvals.sim),mtg=length(pvals.sim)))
system.time(getSigTests(pvalues=pvals.sim, method="bh",alpha=0.1))
pvals.sim
p.adjust(pvals.sim, method="BH")
system.time(p.adjust(pvals.sim, method="BH"))
numeric(65)
library("slidify")
setwd("/home/ejo138/git/fischuu.github.io//presentations//RAndGoogleVisualization")
slidify("index.Rmd")
library("googleVis")
plot(gvisMotionChart(Fruits, "Fruit", "Year", options=list(width=800, height=400)))
slidify("index.Rmd")
slidify("index.Rmd")
library(knirt)
slidify("index.Rmd")
plot(gvisMotionChart(Fruits, "Fruit", "Year", options=list(width=800, height=400)))
slidify("index.Rmd")
slidify("index.Rmd")
library(googleVis)
demo(gvisMotionChart)
?googleVis
demo(googleVis)
getWorldBankData <- function(id='SP.POP.TOTL', date='1960:2010',
value="value", per.page=12000){
require(RJSONIO)
url <- paste("http://api.worldbank.org/countries/all/indicators/", id,
"?date=", date, "&format=json&per_page=", per.page,
sep="")
wbData <- fromJSON(url)[[2]]
wbData = data.frame(
year = as.numeric(sapply(wbData, "[[", "date")),
value = as.numeric(sapply(wbData, function(x)
ifelse(is.null(x[["value"]]),NA, x[["value"]]))),
country.name = sapply(wbData, function(x) x[["country"]]['value']),
country.id = sapply(wbData, function(x) x[["country"]]['id'])
)
names(wbData)[2] <- value
return(wbData)
}
getWorldBankCountries <- function(){
require(RJSONIO)
wbCountries <-
fromJSON("http://api.worldbank.org/countries?per_page=12000&format=json")
wbCountries <- data.frame(t(sapply(wbCountries[[2]], unlist)))
wbCountries$longitude <- as.numeric(wbCountries$longitude)
wbCountries$latitude <- as.numeric(wbCountries$latitude)
levels(wbCountries$region.value) <- gsub(" \\(all income levels\\)",
"", levels(wbCountries$region.value))
return(wbCountries)
}
## Create a string 1960:this year, e.g. 1960:2011
years <- paste("1960:", format(Sys.Date(), "%Y"), sep="")
## Fertility rate
fertility.rate <- getWorldBankData(id='SP.DYN.TFRT.IN',
date=years, value="fertility.rate")
## Life Expectancy
life.exp <- getWorldBankData(id='SP.DYN.LE00.IN',  date=years,
value="life.expectancy")
## Population
population <- getWorldBankData(id='SP.POP.TOTL',  date=years,
value="population")
fertility.rate
dim(fertility.rate)
dim(population)
dim(life.exp)
slidify("index.Rmd")
